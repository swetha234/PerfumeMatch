# -*- coding: utf-8 -*-
"""Fragrance Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dPeXGdDaNFkex97BKFJi79I5eA1NOgmA

#Project Title: Recommendation System for Perfume 

###Abstract
Fragrance is not only about scent, it tells your personality, or the impression you want to leave on people. Every person has a different taste and will like distinct scents. So, this is what I’m doing to find and recommend the flawless perfume that matches one’s choice.

###Objective
Build a recommendation system that helps the customers to find perfumes that corresponds to their personality.

###Details of the Data
Initially I searched a lot for a dataset but could not find any that matched the features I wanted. So, the best option I found was to web-scrape a fragrance website and get the data. The website I chose for this is  https://www.fragrancenet.com/ni/fragrances?f=1f!3D/1f!6. 

The data I scraped from this website are two tables. One table consists of perfume data which includes:
* Brand of the perfume
* Perfume Name
* Notes of the Perfume
* Gender (Male/Female/Unisex)
*	Category (EDT, EDP, Perfume etc.)
* Recommended Time 
*	Year Introduced (when was the perfume released into the market)

The second table is user rating data(yet to get the data, it had 8000+ reviews and was taking time to load, will update in 1 or 2 days ):
*	Rating value: 0-5
*	Review
*	Customer_id

This is the data I tried and achieved to scrape till now, I will scrape few more features in future if required. 


###Design Flow

These are the things I would like to perform to achieve results:
	

*   Web scraping
*   Data Preprocessing
*   EDA (Exploratory Data Analysis)
* 	Data visualization
* 	Data modeling
* 	Model evaluation
"""

from google.colab import drive
drive.mount('/content/drive')

#url = 'https://www.fragrancenet.com/perfume'
import pandas as pd
import requests
from bs4 import BeautifulSoup
import csv
import math

def getPerfumeData():
    perfume_id =0
    perfumeUrls = []
    with open('eg.csv', 'w', newline='') as csvfile:
        fieldnames = ['Id','Brand', 'Category', 'Name', 'Rating','Gender','Notes','Recommended Time','Year','Perfume Url']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for i in range(1, 364):
            print(i)
            url = "https://www.fragrancenet.com/ni/fragrances?f=1f!3D/1f!6R/1f!do?&page="+ str(i)
            res = requests.get(url)
            soup = BeautifulSoup(res.content, 'lxml')
            allDivs = soup.findAll('div',attrs= {'class' : 'resultItem heightSync'})
            for div in allDivs:
                perfume_id +=1
                link= div.find('a')
                linktoperfume = link.get('href')

                perfumeDict={}
                perfumeDict["id"]=perfume_id
                perfumeDict["url"]=linktoperfume
                perfumeUrls.append(perfumeDict)

                name = div.find("span", {"itemprop" : "name"}).text
                if (div.find('div',{'class':'starRating'})):
                    rating =div.find('div',{'class':'starRating'})["data-score"]
                else:
                    rating =None

                secondDiv = div.find("div")
                pTag_brand = secondDiv.find('p',{'class':'des'})
                if(pTag_brand):
                    brand = pTag_brand.find('a').text
                else:
                    brand = secondDiv.find('a').text
                pTag_cat=secondDiv.find('p',{'class':'desc'})
                category = pTag_cat.find('a').text
                itag_women = secondDiv.find('i',{'class':'gender_womens'})
                itag_unisex = secondDiv.find('i',{'class':'gender_unisex'})
                itag_men = secondDiv.find('i',{'class':'gender_mens'})
                if(itag_women):
                    gender = 'women'
                elif(itag_unisex):
                    gender = 'unisex'
                elif(itag_men):
                    gender = 'men'

                res1 = requests.get(linktoperfume)
            
                soup2= BeautifulSoup(res1.content, 'lxml')
                thirdDiv = soup2.findAll('div',{'class' : 'tab-content'})
                for div in thirdDiv:
                    Notes= None
                    recommendedTime= None
                    Year= None
                    if(div.find('ul',{'class':'notes cf' })):
                        notesDiv= div.find('ul',{'class':'notes cf' })
                        for li in notesDiv.findAll('li'):
                            if li.findAll('span')[0].text=="Fragrance Notes:":
                                Notes = li.findAll('span')[1].text
                            if li.findAll('span')[0].text=="Recommended Use:":
                                recommendedTime = li.findAll('span')[1].text
                            if li.findAll('span')[0].text=="Year Introduced:":
                                Year = li.findAll('span')[1].text
                writer.writerow({'Id': perfume_id, 'Brand': brand,'Category': category,'Name': name,'Rating': rating,'Gender': gender,'Notes': Notes,'Recommended Time':recommendedTime ,'Year':Year,'Perfume Url':linktoperfume})

    return perfumeUrls

def getReviews(perfumeUrls):
    with open('reviews.csv', 'w', newline='') as csvfile:
        fieldnames = ['Id','Review', 'Rating']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for perfumeUrl in perfumeUrls:
            print(perfumeUrl["id"])
            res1 = requests.get(perfumeUrl["url"])
            soup2= BeautifulSoup(res1.content, 'lxml')
            reviewCount = soup2.find('li', {"id": "reviewTab"}).text
            reviewCount = reviewCount.replace("Reviews", "")
            reviewCount =reviewCount.replace(" ", "")
            reviewCount =reviewCount.replace("(", "")
            reviewCount =reviewCount.replace(")", "")

            reviewPages= math.ceil(int(reviewCount)/5)
            thirdDiv = soup2.findAll('div',{'class' : 'tab-content'})

            for div in thirdDiv:
                if(div.findAll('div',{'class': 'review'})):
                    reviews =div.findAll('div',{'class': 'review'})
                    for review in reviews:
                        reviewText = review.find('p',{'class': 'text'}).text
                        if (review('div',{'class':'starRating'})):
                            reviewRating =review.find('div',{'class': 'starRating'})["data-score"]
                        writer.writerow({'Id': perfumeUrl["id"], 'Review': reviewText,'Rating': reviewRating})
perfumeUrls=getPerfumeData()
getReviews(perfumeUrls)

"""Importing the CSV files which I have Web scraped"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import warnings
warnings.filterwarnings('ignore')
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import seaborn as sn

from pandas.plotting import scatter_matrix

# %matplotlib inline

#Loading data
perfume = pd.read_csv('/content/drive/My Drive/Perfume Dataset/perfumes.csv', sep=',', error_bad_lines = False, encoding="latin-1")

perfume.columns=['Id','Brand','Category','Name','Rating','Gender','Notes','Recommended Time','Year','Perfume url']

perfume.head()

perfume.shape



import pandas as pd
import warnings
warnings.filterwarnings('ignore')


#Loading data
review = pd.read_csv('/content/drive/My Drive/reviews.csv', sep=',', error_bad_lines = False, encoding="latin-1")

review.columns=['Id','Review','Rating']

review.head()

"""Cleaning the perfume data"""

perfume.describe(include='all')

review.describe(include='all')

perfume.info()

perfume =perfume.drop_duplicates('Id')

perfume.set_index(perfume['Id'], inplace =True)

perfume = perfume.drop(columns="Perfume url")

perfume.head()

perfume.shape

print ("Unique brands: ", perfume['Brand'].nunique())
print ("Perfumes: ", perfume['Id'].nunique())
print ("Recommended Time: ",perfume['Recommended Time'].nunique())
print ("Year: ",perfume['Year'].nunique())
print("Category: ", perfume['Category'].nunique())

Notes = perfume['Notes'].apply(pd.Series)
note_matrix = pd.get_dummies(Notes.apply(pd.Series).stack()).sum(level=0).rename(columns = lambda x : 'note_' +x)

Gender = perfume['Gender'].apply(pd.Series)
gender_matrix = pd.get_dummies(Gender.apply(pd.Series).stack()).sum(level=0).rename(columns = lambda x: 'gender_' + x)

gender_matrix.sum(axis=0).sort_values(ascending=True)

perfume.groupby('Brand')['Id'].count().sort_values(ascending=False)[0:20]

"""**General EDA**"""

perfume['Brand'][(perfume['Gender']== u'women')].value_counts(ascending=False)[0:50].sort_values(ascending=False).plot(kind='bar', color='m', figsize=(15,6), alpha=.6)
plt.title(u'women vs.Brand');

perfume['Brand'][(perfume['Gender']== u'men')].value_counts(ascending=False)[0:50].sort_values(ascending=False).plot(kind='bar', color='b', figsize=(15,6), alpha=.6)
plt.title(u'men vs.Brand');

perfume['Brand'][(perfume['Gender']== u'unisex')].value_counts(ascending=False)[0:50].sort_values(ascending=False).plot(kind='bar', color='g', figsize=(15,6), alpha=.6)
plt.title(u'unisex vs.Brand');

# brand vs. number of perfumes
perfume.groupby('Brand')['Id'].count().sort_values(ascending=False)[0:60].plot(kind='bar', alpha=.7, figsize=(15,6));
plt.title(u'Top 10% perfume brands');

"""**Working with perfume names and notes.**


*   First get a dataframe of names and notes.
*   Build a model that gives you information about which perfume holds which      notes.


*   
*
"""

Perfume1 = pd.DataFrame(perfume,columns=['Name','Notes'])
Perfume1

Perfume2 = Perfume1.dropna()
print('Number of perfumes after removing perfumes that does not have notes:' )
Perfume2

Perfume3 = pd.DataFrame(Perfume2,columns=['Name'])
Perfume3

new_df = pd.DataFrame(Perfume2.Notes.str.split(',').tolist(), index=Perfume3.Name).stack()
new_df = new_df.reset_index([0, 'Name'])
new_df.columns = ['Name', 'Notes']
new_df

df = pd.DataFrame( index=Perfume3['Name'],columns=new_df['Notes'])

# df.to_csv('/content/drive/My Drive/Perfume Dataset/output.csv', encoding='utf-8', index=False)
df
df = perfume[perfume['Name'].str.contains['Notes']]
df

Perfume1 = perfume[perfume['Name'].str.contains("D & G Light Blue") & perfume['Notes'].str.contains('Apple, Cedar, Bellflower, Sicilian lemon, White rose') & perfume['Category'].str.contains('eau de toilette')]
Perfume1

export_csv = df.to_csv (r'/content/drive/My Drive/Perfume Dataset/export_csv.csv', index = None, header=True) #Don't forget to add '.csv' at the end of the path

Perfume1 = perfume[perfume['Name'].str.contains("D & G Light Blue") & perfume['Notes'].str.contains('Apple, Cedar, Bellflower, Sicilian lemon, White rose') & perfume['Category'].str.contains('eau de toilette')]
Perfume1

#  uniqueValues = Perfume1['Notes'].unique()
 

# print(uniqueValues)

# Perfume1.composers.str.split('\s+').str[0]
Perfume1['Notes'].str.split(',', expand=True)
# Perfume1 = Perfume1.set_index('Name') 
  
# Perfume1

ab = pd.read_csv('/content/drive/My Drive/Perfume Dataset/export_csv.csv', sep=',', error_bad_lines = False, encoding="latin-1")
ab

